/* Generated By:JavaCC: Do not edit this line. DatalogParser.java */
package com.getl.datalog.cc;

import com.getl.datalog.DatalogComponent.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;

public class DatalogParser implements DatalogParserConstants {

    // additional fields and methods can be added here

    // Sets the source of Variable (and constants) in the rule head for sql 'SELECT' statement
    static void setVariableSource(Head head, Body body) {
        List terms = head.expression.terms;
        for (int i = 0; i < terms.size(); i++) {
            Term term = (Term)terms.get(i);
            if (term instanceof Variable) {
                for (int j = 0; j < body.expressions.size(); j++) {
                    Expression expression = (Expression)body.expressions.get(j);
                    boolean variableMatched = false;
                    for (int k = 0; k < expression.terms.size(); k++) {
                        Term other = (Term)expression.terms.get(k);
                        if (other instanceof Variable && other.name.equals(term.name)) {
                            variableMatched = true;
                            term.source = expression.alias;
                            term.index = other.index;
                            break;
                        }
                    }
                    if (variableMatched) {
                        break;
                    }
                }
            }else term.source = "'" + term.name + "'";
        }
    }
    // Checks that facts do not contain Variables, else throws error.
    static boolean factSafetyCheck(Fact fact){
        for(Term term : fact.expression.terms){
            if (term instanceof Variable){
                throw new Error("PARSER ERROR: Fact Safety: Facts CANNOT CONTAIN VARIABLES in the terms of its predicate.");
            }
        }
        return true;
    }


    // Checks that all rule head variable are also present in body
    static boolean checkSafety(Rule rule) {
        Set bodyVariables = new HashSet();
        boolean isGremlin = false;
        for (int i = 0; i < rule.body.expressions.size(); i++) {
            for (int j = 0; j < rule.body.expressions.get(i).terms.size(); j++) {

                Term term = rule.body.expressions.get(i).terms.get(j);
                if (term instanceof Variable) {
                    bodyVariables.add(term.name);
                }else if(rule.body.expressions instanceof GremlinBlock){
                    isGremlin = true;
                }
                else {
                    throw new Error("PARSER ERROR: This implementation DOES NOT SUPPORT CONSTANTS in the body of a rule.");
                }
            }

        }
        for (int i = 0; i < rule.head.expression.terms.size(); i++) {

            Term term = rule.head.expression.terms.get(i);
            if (term instanceof Variable && !bodyVariables.contains(term.name) && !isGremlin) {
                System.out.println("Unsafe: Variable " + term.name + " in Rule " + rule.head.expression.predicate);
                // TODO Make unsafe rule throw fatal error to stop parsing and end engine
                throw new Error("PARSER ERROR: UnSafe Rule : Head Variable must occur in body of rule."); // Variable in head not found in body
            }
            else if (term instanceof Constant){
                throw new Error("PARSER ERROR: This implementation DOES NOT SUPPORT CONSTANTS in the head of a rule.");
            }
        }
    return true;
    }

    // Identifies lists all join condition (and constant values) for the 'WHERE' clause of rule sql statement.
    List identifyJoinConditions(List expressions) {
        Map<String, List<Tuple<Expression, Integer>>> variableToExpression = new HashMap();
        List<JoinCondition> joinConditions = new ArrayList();

        for (int i = 0; i < expressions.size(); i++) {
            Expression expression = (Expression)expressions.get(i);
            for (int j = 0; j < expression.terms.size(); j++) {
                Term term = expression.terms.get(j);

                if(term instanceof Variable){
                    List expressionList = variableToExpression.get(term.name);
                    if (expressionList == null) {
                        expressionList = new ArrayList();
                        variableToExpression.put(term.name, expressionList);
                    }
                    expressionList.add(new Tuple(expression, j + 1)); // +1 because SQL is 1-indexed
                }
                else if(term instanceof Constant){
                    joinConditions.add(new JoinCondition(term.name, new Tuple(expression, j + 1)));
                }
            }
        }

        for (String variableName : variableToExpression.keySet()) {
            if (((List)variableToExpression.get(variableName)).size() > 1) {
                joinConditions.add(new JoinCondition(variableName, variableToExpression.get(variableName)));
            }
        }

        return joinConditions;
    }

  final public Program Program() throws ParseException {
    List rules = new ArrayList();
    List facts = new ArrayList();
    Statement statement;
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      statement = Statement();
            if (statement instanceof Rule) rules.add((Rule) statement);
            else if (statement instanceof Fact) facts.add((Fact) statement);
    }
      {if (true) return new Program(rules, facts);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
    Rule rule;
    Fact fact;
    if (jj_2_2(2147483647)) {
      rule = Rule();
                                                  {if (true) return rule;}
    } else if (jj_2_3(2)) {
      fact = Fact();
                    {if (true) return fact;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Rule Rule() throws ParseException {
    Head head;
    Body body;
    Rule rule = new Rule();
    head = Head();
    jj_consume_token(8);
    body = Body(rule);
        rule.head = head;
        rule.body = body;
    jj_consume_token(PERIOD);
    checkSafety(rule);

    // The 'source' of a head variable is used in SQL SELECT as (predicate.alias).ai
    //  Where 'alias' is the distinct table name in which the variable first appears
    // in the body of the rule (e.g table AS table1) and ai is the columnName (a + index) in the SQL table.

    setVariableSource(head, body);

    rule.body.joinConditions = identifyJoinConditions(rule.body.expressions);
      {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

  final public Fact Fact() throws ParseException {
    Expression expression;
    Fact fact;
    expression = Expression(null);
    jj_consume_token(PERIOD);
        fact = new Fact(expression);
        factSafetyCheck(fact);
        {if (true) return fact;}
    throw new Error("Missing return statement in function");
  }

  final public Head Head() throws ParseException {
    Expression expression;
    expression = Expression(null);
      {if (true) return new Head(expression);}
    throw new Error("Missing return statement in function");
  }

  final public Body Body(Rule rule) throws ParseException {
    List expressions = new ArrayList();
    Expression expression;
    expression = Expression(rule);
          expressions.add(expression);
    label_2:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      expression = Expression(rule);
          expressions.add(expression);
    }
      {if (true) return new Body(expressions);}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression(Rule rule) throws ParseException {
    Token token;
    String predicate;
    List terms = new ArrayList();
    Token block;
    Term term;
    String alias = null;
    if (jj_2_7(2)) {
      token = jj_consume_token(PRED_CONST_NAME);
        predicate = token.image;
        int count = rule != null ? rule.bodyPredicateCounts.getOrDefault(predicate, 0) + 1 : 1;
        if (rule != null) rule.bodyPredicateCounts.put(predicate, count);
        alias = predicate + count;
      jj_consume_token(9);
      term = Term();
                        term.source = alias; term.index = terms.size() + 1; terms.add(term);
      label_3:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(COMMA);
        term = Term();
                                term.source = alias; term.index = terms.size() + 1; terms.add(term);
      }
      jj_consume_token(10);
      {if (true) return new Expression(predicate, terms, alias);}
    } else if (jj_2_8(2)) {
      token = jj_consume_token(GREMLIN);
        // 新增处理GREMLIN谓词的分支
         predicate = "gremlin";
         int count = rule != null ? rule.bodyPredicateCounts.getOrDefault(predicate, 0) + 1 : 1;
         if (rule != null) rule.bodyPredicateCounts.put(predicate, count);
         alias = predicate + count;
      block = jj_consume_token(GREMLIN_BLOCK);
         String gremlinBlock = block.image.substring(1,block.image.length()-1);
      jj_consume_token(9);
      term = Term();
                                 term.source = alias; term.index = terms.size() + 1; terms.add(term);
      label_4:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(COMMA);
        term = Term();
                                         term.source = alias; term.index = terms.size() + 1; terms.add(term);
      }
      jj_consume_token(10);
          {if (true) return new GremlinBlock(gremlinBlock, terms, alias);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term Term() throws ParseException {
    Variable variable;
    Constant constant;
    if (jj_2_9(2)) {
      variable = Variable();
                            {if (true) return variable;}
    } else if (jj_2_10(2)) {
      constant = Constant();
                            {if (true) return constant;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Variable Variable() throws ParseException {
    Token token;
    String name;
    token = jj_consume_token(VAR_NAME);
        name = token.image;
        {if (true) return new Variable(name, null, 0);} // Source and index to be set later

    throw new Error("Missing return statement in function");
  }

  final public Constant Constant() throws ParseException {
    Token token;
    String value;
    token = jj_consume_token(PRED_CONST_NAME);
        value = token.image;
        {if (true) return new Constant(value);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_3R_12() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(8)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(GREMLIN)) return true;
    if (jj_scan_token(GREMLIN_BLOCK)) return true;
    if (jj_scan_token(9)) return true;
    if (jj_3R_8()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(10)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(PRED_CONST_NAME)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(VAR_NAME)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(PRED_CONST_NAME)) return true;
    if (jj_scan_token(9)) return true;
    if (jj_3R_8()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(10)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DatalogParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DatalogParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DatalogParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DatalogParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DatalogParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DatalogParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DatalogParser(DatalogParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DatalogParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[11];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 11; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

     }
